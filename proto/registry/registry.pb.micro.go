// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: registry.proto

package registry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/v2/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Registry service

type RegistryService interface {
	Register(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Deregister(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetNodes(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type registryService struct {
	c    client.Client
	name string
}

func NewRegistryService(name string, c client.Client) RegistryService {
	return &registryService{
		c:    c,
		name: name,
	}
}

func (c *registryService) Register(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Registry.Register", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryService) Deregister(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Registry.Deregister", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryService) GetNodes(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Registry.GetNodes", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryHandler interface {
	Register(context.Context, *proto1.Request, *proto1.Response) error
	Deregister(context.Context, *proto1.Request, *proto1.Response) error
	GetNodes(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterRegistryHandler(s server.Server, hdlr RegistryHandler, opts ...server.HandlerOption) error {
	type registry interface {
		Register(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Deregister(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetNodes(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Registry struct {
		registry
	}
	h := &registryHandler{hdlr}
	return s.Handle(s.NewHandler(&Registry{h}, opts...))
}

type registryHandler struct {
	RegistryHandler
}

func (h *registryHandler) Register(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.RegistryHandler.Register(ctx, in, out)
}

func (h *registryHandler) Deregister(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.RegistryHandler.Deregister(ctx, in, out)
}

func (h *registryHandler) GetNodes(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.RegistryHandler.GetNodes(ctx, in, out)
}
